# -*- coding: utf-8 -*-
"""Copy of reg_cars_selling_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BHSV1q7oN5RXHxB0Pho8cW8knAAEdvwJ
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

df  = pd.read_csv(r"C:\Users\omar\Desktop\reg_cars_streamlit\data\reg_cars_selling.csv")

df.head()

df.info()

df.describe()

df.isnull().sum()

df.selling_price.describe()

"""# **1 cleaning**

"""

df.head()

df.drop_duplicates(inplace=True)

df.dropna(inplace=True)

df.isnull().sum()

df.head()

df.describe()

df.info()







# كيف يرتبط عمر السيارة (year) بسعر البيع
plt.figure(figsize = (15,10))
plt.bar( df.year , df.selling_price , color = 'darkgreen', alpha = 0.85)

plt.xlabel('Factors', fontsize = 15, weight = 'bold')

# كيف يرتبط عمر السيارة (year) بسعر البيع
plt.figure(figsize=(15, 8))
sns.barplot(data=df, x="year", y="selling_price", hue="fuel", ci=None)

plt.xlabel("year", fontsize=14, weight="bold")
plt.ylabel("selling_price", fontsize=14, weight="bold")
plt.title("Year of manufacture relationship to selling price divided by fuel type", fontsize=16, weight="bold")
plt.xticks(rotation=45)
plt.legend(title="fuel")
plt.show()

df.head()

plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="transmission", y="selling_price", palette="Set2")

df['max_power'] = df['max_power'].str.replace(' bhp', '').astype(float)

df['max_power'].value_counts()

plt.figure(figsize=(15, 10))

plt.bar(df['max_power'] ,df['selling_price'] , color = 'purple')
plt.xlabel('max_power')
plt.ylabel('selling_price')
plt.show()

plt.figure(figsize=(15, 10))

plt.bar(df['seller_type'] ,df['selling_price'] , color = 'brown')
plt.xlabel('seller_type')
plt.ylabel('selling_price')
plt.show()

plt.figure(figsize=(15, 10))
plt.bar(df['seats'] ,df['selling_price'] , color = 'navy')
plt.xlabel('seats')
plt.ylabel('selling_price')
plt.show()

plt.figure(figsize=(8, 5))
sns.countplot(x=df['seats'], palette='mako')

plt.title("Count of Cars by Number of Seats")
plt.ylabel("Count")
plt.xlabel("Number of Seats")
plt.show()



"""# **pre-procising**"""

df.info()

df.describe()

df['max_power'] = df['max_power'].replace(' ', '').astype(float)

df.loc[df['max_power'] == df['max_power'].max()]

df['selling_price_INR'] = df['selling_price']

df.drop('selling_price' , axis=1 , inplace=True)

df.head()

df['mileage'] = df['mileage'].str.replace(r' kmpl$', '', regex=True)
df['mileage'] = df['mileage'].str.replace(r' km/kg$', '', regex=True)
df['mileage'] = df['mileage'].astype(float)  # تحويله إلى رقم

df['engine'] = df['engine'].str.replace(' CC$', '')

df['engine'] = df['engine'].str.replace(' CC', '')

df['engine'] = df['engine'].astype(float)  # تحويله إلى رقم

df['engine'].info()

#أصبح لدينا عمود torque_Nm يحتوي فقط على قيم العزم بالأرقام
df['torque_Nm'] = df['torque'].str.extractall(r'([\d\.]+)\s*Nm').dropna().reset_index(drop=True)[0]

df.drop(columns=['torque'], inplace=True)

df.head()

df_car_numeric = df.copy()

df_car_numeric['brand'] = df_car_numeric['name'].apply(lambda x: str(x).split()[0])  # استخراج أول كلمة كعلامة تجارية
df_car_numeric.drop(columns=['name'], inplace=True)  # حذف الاسم الأصلي

df_car_numeric.head()

df_car_numeric['brand'].value_counts()

df_car_numeric.head()

df_car_numeric[ df_car_numeric['selling_price_INR'].max() == df_car_numeric['selling_price_INR'] ]





"""# **LabelEncoder**"""

from sklearn.preprocessing import LabelEncoder

encoder   = LabelEncoder()

# تطبيق التحويل على كل الأعمدة (النصية فقط)
for col in df_car_numeric.columns:
    if df_car_numeric[col].dtype == 'object':  # التأكد أن العمود نصي
        df_car_numeric[col] = encoder.fit_transform(df_car_numeric[col])  # تحويل القيم النصية إلى أرقام

df_car_numeric.head()

df_car_numeric.info()

df_car_numeric['brand'].nunique()

import seaborn as sns
import matplotlib.pyplot as plt

# حساب مصفوفة الارتباط
correlation_matrix = df_car_numeric.corr()

# رسم مصفوفة الارتباط
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

df_car_numeric.isna().sum()

df_car_numeric.describe()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
sns.scatterplot(x=df_car_numeric['torque_Nm'], y=df_car_numeric['selling_price_INR'], alpha=0.5)
plt.xlabel("Torque (Nm)")
plt.ylabel("Selling Price")
plt.title("Relationship between Torque and Selling Price")
plt.show()

# حساب الارتباط
correlation = df_car_numeric[['torque_Nm', 'selling_price_INR']].corr()
print("Correlation between Torque and Selling Price:")
print(correlation)

#حذفها  علاقتها ضعيفة بل بعد حذفها تحسن النموذج
df_car_numeric.drop(columns=['torque_Nm'],axis=1 ,  inplace=True)

df_car_numeric.head()

#localoutlyersvactor

df_car_numeric = pd.DataFrame(df_car_numeric)



from sklearn.neighbors import LocalOutlierFactor

lof = LocalOutlierFactor()

outlier_labels = lof.fit_predict(df_car_numeric)

df_car_numeric['outlier_labels'] = outlier_labels

(df_car_numeric['outlier_labels'] == -1 ).sum()

df_car_numeric

df_car_numeric = df_car_numeric[df_car_numeric['outlier_labels'] !=-1 ]
df_car_numeric.head()

df_car_numeric.drop(columns=['outlier_labels'], inplace=True)

import seaborn as sns
import matplotlib.pyplot as plt

# حساب مصفوفة الارتباط
correlation_matrix = df_car_numeric.corr()

# رسم مصفوفة الارتباط
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

print(df_car_numeric.columns)

X = df_car_numeric.drop('selling_price_INR', axis=1).values
y = df_car_numeric['selling_price_INR'].values

from sklearn.preprocessing import StandardScaler

st = StandardScaler()

X = st.fit_transform(X)

# ndarray with shape (7906,)
y = st.fit_transform(y.reshape(-1, 1))

X

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

df_car_numeric_forest = df_car_numeric

from sklearn.ensemble import RandomForestRegressor

RFR = RandomForestRegressor(n_estimators=100, random_state=42)

RFR.fit(X_train, y_train)

RFR_pred = RFR.predict(X_test)

from sklearn.metrics import mean_squared_error , r2_score

mean_squared_error(y_test, RFR_pred)

# حساب R² بين القيم الحقيقية (y_test) و القيم المتوقعة (RFR_pred)
r2 = r2_score(y_test, RFR_pred)

# عرض النتيجة
print(f"R² Score: {r2:.4f}")

